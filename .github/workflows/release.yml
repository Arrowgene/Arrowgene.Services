name: Create Release
on:
  push:
    branches:
      - master
jobs:
  build:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v1
        
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.0.100
          
      - name: Build Release
        id: build_release
        run: |
          VERSION_FILE=${{ github.workspace }}/services.version
          VERSION=$(<"$VERSION_FILE")
          echo ::set-env name=VERSION::$VERSION
          mkdir ./release
          for RUNTIME in win-x86 win-x64 linux-x64 osx-x64; do
              dotnet publish Arrowgene.Services/Arrowgene.Services.csproj /p:Version=$VERSION /p:FromMSBuild=true --runtime $RUNTIME --configuration Release --output ./publish/$RUNTIME-$VERSION
              tar cjf ./release/$RUNTIME-$VERSION.tar.gz ./publish/$RUNTIME-$VERSION
          done

      - name: Publish NuGet
        id: publish_nuget
        run: |
          dotnet pack Arrowgene.Services/Arrowgene.Services.csproj --output ../nupkgs /p:Version=${{ env.VERSION }}
          dotnet nuget source Add -Name "GitHub" -Source "https://nuget.pkg.github.com/sebastian-heinz/index.json" -UserName sebastian-heinz -Password ${{ secrets.GITHUB_TOKEN }}
          dotnet nuget push ../nupkgs/Arrowgene.Services.${{ env.VERSION }}.nupkg -Source "GitHub"
          dotnet nuget push ../nupkgs/Arrowgene.Services.${{ env.VERSION }}.nupkg --api-key ${{ secrets.NUGET_DEPLOY_KEY }} --source https://www.nuget.org/api/v2/package
          
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: release-${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          draft: false
          prerelease: false

      - name: Upload win-x86 Release Asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/win-x86-${{ env.VERSION }}.tar.gz
          asset_name: win-x86-${{ env.VERSION }}-${{ env.VERSION }}.tar.gz
          asset_content_type: application/gzip
          
      - name: Upload win-x64 Release Asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/win-x64-${{ env.VERSION }}.tar.gz
          asset_name: win-x64-${{ env.VERSION }}-${{ env.VERSION }}.tar.gz
          asset_content_type: application/gzip
          
      - name: Upload linux-x64 Release Asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/linux-x64-${{ env.VERSION }}.tar.gz
          asset_name: linux-x64-${{ env.VERSION }}-${{ env.VERSION }}.tar.gz
          asset_content_type: application/gzip
          
      - name: Upload osx-x64 Release Asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/osx-x64-${{ env.VERSION }}.tar.gz
          asset_name: osx-x64-${{ env.VERSION }}-${{ env.VERSION }}.tar.gz
          asset_content_type: application/gzip